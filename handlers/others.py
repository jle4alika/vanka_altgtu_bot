import asyncio

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import CommandStart, Command
from aiogram.fsm.context import FSMContext
import database.requests.get as get
import database.requests.add as add
import database.requests.others as set
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import keyboards.inline as kb
import keyboards.reply as kbr
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from icalendar import Calendar
import datetime

import qrcode
import re
import os
from dotenv import load_dotenv, find_dotenv
from pyrogram import Client
from pyrogram.raw.functions.contacts import ResolveUsername
import random

load_dotenv(find_dotenv())

router = Router()

pyrogram_client = Client(
    "michael",
    api_id=25172187,
    api_hash="c163275c64658d29c719f13786a92cbb",
    bot_token=os.getenv('TOKEN'),
    in_memory=False
)
async def resolve_username_to_user_id(username: str) -> int | None:
    try:
        await pyrogram_client.start()
    finally:
        r = await pyrogram_client.invoke(ResolveUsername(username=username))
        if r.users:
            return r.users[0].id


class Reg(StatesGroup):
    faculty = State()
    group = State()

class Settings(StatesGroup):
    schedule = State()
    homework_edit = State()
    homework_add_and_edit = State()
    new_headman = State()
    mail = State()


@router.message(Command('donate'))
async def donate(message: Message):
    await message.answer('<b>üíñ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ @jle4alika! üíñ</b>'
                         '\n\n–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ, —á—Ç–æ —è –¥–µ–ª–∞—é, –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –º–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –º–µ–Ω—è –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏ –∏ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å —Å–≤–µ–∂–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.'
                         '\n\n<b>üåü –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ:</b>'
                         '\n\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å" –Ω–∏–∂–µ.'
                         '\n\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏.'
                         '\n\n3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.'
                         '\n\n–ö–∞–∂–¥—ã–π –≤–∫–ª–∞–¥, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞, –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!'
                         '\n\nüôè<b> –í–∞—à–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –º–Ω–µ:</b>'
                         '\n\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
                         '\n\n‚Ä¢ –£–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω–∞ –±–æ—Ç–∞'
                         '\n\n‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã'
                         '\n\n‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞—Ç—å —Ö–æ—Å—Ç–∏–Ω–≥ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞'
                         '\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å–æ –º–Ω–æ–π! ‚ù§Ô∏è',
                         reply_markup=kb.donate,
                         parse_mode=ParseMode.HTML)

@router.message(CommandStart())
async def start(message: Message, bot: Bot):
    user_bool = await get.get_user_bool(message.from_user.id)
    if not user_bool:
        await message.answer(
            'üéì –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üìö‚ú®')
        start_command = message.text
        username = message.from_user.username
        referrer_id = str(start_command[7:])
        if str(referrer_id) != '':
            if str(referrer_id) != str(message.from_user.id):
                title = await get.get_group_title(referrer_id)
                await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É {title} üìö‚ú®',
                                     reply_markup=kbr.user_main)
                await set.set_user(message.from_user.id, int(referrer_id))
                await bot.send_message(referrer_id, f'–í –≥—Ä—É–ø–ø—É –≤—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}')
            else:
                await message.answer('<ins>–ù–µ–ª—å–∑—è</ins> —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ!', parse_mode=ParseMode.HTML)
        else:
            await message.answer('\n\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:'
                                 '\n\nüéì <b>–Ø —Å—Ç—É–¥–µ–Ω—Ç</b> ‚Äî –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ.'
                                 '\nüßë‚Äçüè´ <b>–Ø —Å—Ç–∞—Ä–æ—Å—Ç–∞</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –∏ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                                 reply_markup=kb.user,
                                 parse_mode=ParseMode.HTML)
    else:
        user = await get.get_group_headman(message.from_user.id)
        if user == message.from_user.id:
            await message.answer(
                'üéì –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üìö‚ú®',
            reply_markup=kbr.main)
        else:
            await message.answer(
                'üéì –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üìö‚ú®',
            reply_markup=kbr.user_main)

@router.callback_query(F.data == 'student')
async def student(callback: CallbackQuery):
    await callback.message.answer(
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–≤—è–∂–∏—Å—å —Å–æ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π</b> –∏ –ø–æ–ø—Ä–æ—Å–∏ —É –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥. üì≤'
        '\n\n–£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üçÄ',
        parse_mode=ParseMode.HTML)
    await asyncio.sleep(1)
    await callback.message.answer('üåü<b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏! </b>üåü'
                                  '\n\n–ß—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –Ω–∞—à–µ–º –±–æ—Ç–µ, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @vankavstankaaltgtunews (https://t.me/vankavstanka_altgtu_news).'
                                  '\n\n–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ —É–∑–Ω–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ —É–ª—É—á—à–µ–Ω–∏—è—Ö! üöÄ'
                                  '\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=kb.news)

@router.callback_query(F.data == 'headman')
async def headman(callback: CallbackQuery):
    await set.set_user(callback.from_user.id)
    await callback.message.answer('–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Ç—ã —Å–º–æ–∂–µ—à—å:'
                                  '\n\n‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóìÔ∏è'
                                  '\n\n‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É üìö'
                                  '\n\n‚Ä¢ –î–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º üöÄ',
                                  reply_markup=kb.start)
# @router.message(Reg.name)
# async def nickname(message: Message, state: FSMContext):
#     names = await get.get_all_names(message.from_user.id)
#     await state.update_data(name=message.text)
#     data = message.text
#     counter = 0
#     for item in names:
#         if item == data:
#             counter += 1
#
#     if counter == 1:
#         await message.answer('–≠–π, —Ç–∞–∫–æ–µ –§–ò–û —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ!')
#     else:
#         await add.add_name(message.from_user.id, str(data))
#         await state.clear()
#         await message.answer(f'<b>{data}</b>, –≤–∞—àe –§–ò–û —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–∞—à–µ –§–ò–û –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', parse_mode=ParseMode.HTML)
#         await message.answer('–¢–µ–ø–µ—Ä—å —Ç—ã <ins>–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ</ins>! –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.\n –ò–ª–∏ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—ë, <ins>–µ—Å–ª–∏ —Ç—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞</ins>!', reply_markup=kb.start, parse_mode=ParseMode.HTML)


@router.callback_query(F.data == 'new_group')
async def new_group(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∑–¥–µ—Å—å:')
    await state.set_state(Reg.faculty)

@router.message(Reg.faculty)
async def faculty(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∑–¥–µ—Å—å:')
    await state.set_state(Reg.group)


@router.message(Reg.group)
async def group(message: Message, state: FSMContext):
    counter = 0
    for title in await get.get_groups_titles():
        if title == message.text:
            counter += 1
    if counter == 0:
        await state.update_data(group=message.text)
        data = await state.get_data()
        await message.answer(f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –≥—Ä—É–ø–ø—É {data["group"]} ‚ú®', reply_markup=kbr.main)
        await state.clear()
        await set.set_group(message.from_user.id, data["group"], data["faculty"])
        await set.set_user_group(message.from_user.id, message.from_user.id)
        await add.add_group_member(message.from_user.id)
        await asyncio.sleep(1)
        link = f'https://t.me/Alina_best_tutor_ever_bot?start={message.from_user.id}'
        # –∏–º—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = f"qr-codes/{message.from_user.id}.jpg"
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º qr-–∫–æ–¥
        img = qrcode.make(link)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º img –≤ —Ñ–∞–π–ª
        img.save(filename)
        qr = FSInputFile(rf"qr-codes\{message.from_user.id}.jpg")
        await message.answer_photo( photo=qr,
                                    caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã'
                                            '\n\n–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!'
                                            '\n\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –∏–º–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!'
                                            f'\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{link}'
                                            f'\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –¥–∞–π –∑–Ω–∞—Ç—å!'
                                            f'\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! üí™')

        await asyncio.sleep(1)
        await message.answer('üåü<b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏! </b>üåü'
                             '\n\n–ß—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –Ω–∞—à–µ–º –±–æ—Ç–µ, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @vankavstankaaltgtunews (https://t.me/vankavstanka_altgtu_news).'
                             '\n\n–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ —É–∑–Ω–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ —É–ª—É—á—à–µ–Ω–∏—è—Ö! üöÄ'
                             '\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è',
                             parse_mode=ParseMode.HTML,
                             reply_markup=kb.news)
    else:
        await message.answer('–î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ.')


@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
async def settings(message: Message):
    headman = await get.get_group_headman(message.from_user.id)

    if headman:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è! \n'
                             '–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã, –ø–æ–º–µ–Ω—è—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–≤–æ–∏ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                             reply_markup=kb.headman_settings)



# @router.callback_query(F.data  == 'upload_schedule')
# async def upload_schedule(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer('–û—Ç–ø—Ä–∞–≤–∏—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <ins>ics</ins>\n\n'
#                                   '–õ–ö -> –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ -> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É) ->\n'
#                                   '–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ ics', parse_mode=ParseMode.HTML)
#     await state.set_state(Settings.schedule)


# @router.message(Settings.schedule)
# async def schedule_download(message: Message, bot: Bot, state: FSMContext):
#     file_id = message.document.file_id
#     await state.update_data(schedule=file_id)
#     file = await bot.get_file(file_id)
#     file_path = file.file_path
#     path = rf"schedules\{message.from_user.id}.ics"
#     document = message.document
#     await bot.download_file(file_path=file_path, destination=path)
#     await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! ‚ú®')
#     await state.clear()


@router.callback_query(F.data == 'change_homework')
async def set_homework(callback: CallbackQuery, state: FSMContext):
    homework = await get.get_homework(callback.from_user.id)
    await callback.message.answer(f'–¢–µ–∫—É—â–µ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n {homework}', reply_markup=kb.set_homework)

@router.callback_query(F.data == 'edit')
async def set_homework(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Settings.homework_edit)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ <ins>–Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</ins>', parse_mode=ParseMode.HTML)

@router.callback_query(F.data == 'add_and_edit')
async def set_homework(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Settings.homework_add_and_edit)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ, <ins>—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</ins>', parse_mode=ParseMode.HTML)


@router.message(Settings.homework_add_and_edit)
async def get_new_homework(message: Message, state: FSMContext):
    await state.update_data(homework_add_and_edit=message.text)
    data = message.text
    await add.add_and_edit_homework(message.from_user.id, data)
    homework = await get.get_homework(message.from_user.id)
    await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}', reply_markup=kb.finish_homework_add_and_edit)


@router.message(Settings.homework_edit)
async def get_new_homework(message: Message, state: FSMContext):
    await state.update_data(homework_edit=message.text)
    data = message.text
    await add.edit_homework(message.from_user.id, data)
    homework = await get.get_homework(message.from_user.id)
    await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}', reply_markup=kb.finish_homework_edit)



@router.callback_query(F.data == 'save_homework_edit')
async def save_homework(callback: CallbackQuery, state: FSMContext):
    homework = await get.get_homework(callback.from_user.id)
    await state.clear()
    await callback.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}')


@router.callback_query(F.data == 'save_homework_add_and_edit')
async def save_homework(callback: CallbackQuery, state: FSMContext):
    homework = await get.get_homework(callback.from_user.id)
    await state.clear()
    await callback.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}')


@router.callback_query(F.data == 'change_headman')
async def change_headman(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä–æ—Å—Ç—ã:')
    await state.set_state(Settings.new_headman)


@router.message(Settings.new_headman)
async def get_new_homework(message: Message, state: FSMContext, bot: Bot):
    mention = re.search(r'@(\w+)', message.text)
    print(mention)
    await state.update_data(new_headman=message.text)
    if mention:
        username = mention.group(1)
        print(username)
        headman = await resolve_username_to_user_id(username)
        print(headman)

        if headman != message.from_user.id:
            await add.new_headman(message.from_user.id, headman)
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã - @{username}!', reply_markup=kbr.user_main)
            await bot.send_message(headman, '–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã –≤ –≥—Ä—É–ø–ø–µ!', reply_markup=kbr.main)


@router.callback_query(F.data == 'link')
async def change_headman(callback: CallbackQuery):
    link = f'https://t.me/Alina_best_tutor_ever_bot?start={callback.from_user.id}'

    if os.path.exists(rf"qr-codes\{callback.from_user.id}.jpg"):
        qr = FSInputFile(f"qr-codes/{callback.from_user.id}.jpg")
        await callback.message.answer_photo(photo=qr,
                                            caption=f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã'
                                                    '\n\n–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!'
                                                    '\n\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –∏–º–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!'
                                                    f'\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{link}'
                                                    f'\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –¥–∞–π –∑–Ω–∞—Ç—å!'
                                                    f'\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! üí™')
    else:
        # –∏–º—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = f"qr-codes/{callback.from_user.id}.jpg"
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º qr-–∫–æ–¥
        img = qrcode.make(link)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º img –≤ —Ñ–∞–π–ª
        img.save(filename)
        qr = FSInputFile(rf"qr-codes\{callback.from_user.id}.jpg")
        await callback.message.answer_photo(photo=qr,
                                            caption=f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã'
                                                    '\n\n–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!'
                                                    '\n\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –∏–º–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!'
                                                    f'\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{link}'
                                                    f'\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –¥–∞–π –∑–Ω–∞—Ç—å!'
                                                    f'\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! üí™')

@router.callback_query(F.data == 'mailing_list')
async def change_headman(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üöÄ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(Settings.mail)


@router.message(Settings.mail)
async def mailing(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(mail=message.text)
    mail = f'üì¢ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! üåü –≠—Ç–æ –≤–∞—à —Å—Ç–∞—Ä–æ—Å—Ç–∞, –∏ —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! \n\n<blockquote><b>{message.text}</b></blockquote>'

    users = await get.get_group_users(message.from_user.id)
    for user in users:
        await bot.send_message(user, mail, parse_mode=ParseMode.HTML)

# async def group_kb(callback: CallbackQuery):
#     all_groups = await get.get_groups()
#     length = len(all_groups)
#
#     if callback.data.startswith('–î–∞–ª–µ–µ_') or callback.data.startswith('–ù–∞–∑–∞–¥_'):
#         if str(callback.data[:6]) == '–î–∞–ª–µ–µ_':
#             i = int(callback.data[6:])
#             i += 1
#         else:
#             i = int(callback.data[6:])
#             i -= 1
#     else:
#         i = 1
#
#     key = InlineKeyboardBuilder()
#     if i == 1:
#         for group in all_groups[:8]:
#             title = await get.get_group_title(group)
#             members = await get.get_group_members(group)
#             groups = key.add(InlineKeyboardButton(text=f'{title} {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data=f'name_{group}'))
#             groups.adjust(2)
#         if length / i > 8:
#             next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'–î–∞–ª–µ–µ_{i}'))
#             next.adjust(2)
#     else:
#         if i*8 >= length:
#             for group in all_groups[(i - 1) * 8:i * 8]:
#                 members = await get.get_group_members(group)
#                 title = await get.get_group_title(group)
#                 groups = key.add(InlineKeyboardButton(text=f'{title} {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data=f'name_{group}'))
#                 groups.adjust(2)
#             if length / i > 8:
#                 next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'–î–∞–ª–µ–µ_{i}'))
#                 next.adjust(2)
#         elif i*8 <= length:
#             if length < (i+1)*8:
#                 for group in all_groups[(i - 1) * 8:length]:
#                     members = await get.get_group_members(group)
#                     title = await get.get_group_title(group)
#                     groups = key.add(InlineKeyboardButton(text=f'{title} {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data=f'name_{group}'))
#                     groups.adjust(2)
#             for group in all_groups[(i-1)*8:length-1]:
#                 members = await get.get_group_members(group)
#                 title = await get.get_group_title(group)
#                 groups = key.add(InlineKeyboardButton(text=f'{title} {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data=f'name_{group}'))
#                 groups.adjust(2)
#             if length / i > 8:
#                 next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'–î–∞–ª–µ–µ_{i}'))
#                 next.adjust(2)
#         back = key.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'–ù–∞–∑–∞–¥_{i}'))
#         back.adjust(2)
#     if length == 0:
#         await callback.answer('–ì—Ä—É–ø–ø –Ω–µ—Ç—É.', show_alert=True)
#         return None
#     else:
#         return groups.as_markup()


# @router.callback_query(F.data == 'choose_group')
# async def clan_open_clan(callback: CallbackQuery):
#     if await group_kb(callback) != None:
#         await callback.message.edit_reply_markup(reply_markup=await group_kb(callback))
#
#
# @router.callback_query(F.data.startswith('name_'))
# async def clan_open_clan(callback: CallbackQuery):
#     # Clan_add.name = str(callback.data.replace('name_', ''))
#     group = str(callback.data.replace('name_', ''))
#     title = await get.get_group_title(group)
#     yes = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å', callback_data=f'–í—Å—Ç—É–ø–∏—Ç—å_{group}'),
#                 InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥')
#             ]
#         ]
#     )
#     await callback.message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ {title}?', reply_markup=yes)
#
# @router.callback_query(F.data.startswith('–í—Å—Ç—É–ø–∏—Ç—å'))
# async def join(callback: CallbackQuery):
#     group = str(callback.data.replace('–í—Å—Ç—É–ø–∏—Ç—å_', ''))
#     title = await get.get_group_title(group)
#     await set.set_user_group(callback.from_user.id, group)
#     await callback.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É {title}',
#                                   reply_markup=kbr.user_main)
#
# @router.callback_query(F.data == '–ù–∞–∑–∞–¥')
# async def back(callback: CallbackQuery):
#     await callback.message.answer('–í–æ—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø)', reply_markup=await group_kb(callback))


